
mc_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  000005a2  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000f8  008000f8  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001081  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000759  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000650  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f2  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000328f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3f       	cpi	r26, 0xF8	; 248
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 ef       	ldi	r26, 0xF8	; 248
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  8a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdCommand>:
unsigned char keypad[4][4] ={ {'4','7','9','/'},{'5','8','6','*'},{'1','2','3','-'},{' ','0','=','+'}};
//unsigned char keypad[4][4] ={ {'7','8','9','/'},{'1','4','7','*'},{'2','5','8','0'},{' ','6','9','#'}};

void lcdCommand( unsigned char cmnd )
{
	LCD_DPRT = cmnd;
  92:	82 bb       	out	0x12, r24	; 18
	LCD_CPRT &= ~ ((1<<LCD_RS)|(1<<LCD_RW)); //RS = 0 RW = 0
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8e 7b       	andi	r24, 0xBE	; 190
  98:	85 bb       	out	0x15, r24	; 21
	LCD_CPRT |= (1<<LCD_EN); //EN = 1
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	87 ec       	ldi	r24, 0xC7	; 199
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdCommand+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcdCommand+0x18>
  aa:	00 00       	nop
	_delay_us(100);
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	87 ec       	ldi	r24, 0xC7	; 199
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdCommand+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcdCommand+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <lcdData>:
	_delay_us(100);
}
void lcdData( unsigned char data )
{
	LCD_DPRT = data; //send data
  c0:	82 bb       	out	0x12, r24	; 18
	LCD_CPRT &= ~ (1<<LCD_RW); //RW = 0 for write
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	85 bb       	out	0x15, r24	; 21
	LCD_CPRT |= ((1<<LCD_RS)|(1<<LCD_EN)); //RS = 1 for data //EN = 1
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	81 68       	ori	r24, 0x81	; 129
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	87 ec       	ldi	r24, 0xC7	; 199
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcdData+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcdData+0x18>
  d8:	00 00       	nop
	_delay_us(100);
	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	85 bb       	out	0x15, r24	; 21
  e0:	87 ec       	ldi	r24, 0xC7	; 199
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcdData+0x24>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcdData+0x2a>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcd_init>:
	_delay_us(100);
}

void lcd_init()
{
	LCD_DDDR = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	81 bb       	out	0x11, r24	; 17
	LCD_CDDR = 0xFF;
  f2:	84 bb       	out	0x14, r24	; 20
	LCD_CPRT &=~(1<<LCD_EN); //LCD_EN = 0
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_init+0x10>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_init+0x16>
 104:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x38); //init. LCD 2 line, 5 × 7 matrix
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
	lcdCommand(0x0E); //display on, cursor on
 10c:	8e e0       	ldi	r24, 0x0E	; 14
 10e:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
	lcdCommand(0x01); //clear LCD
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x2e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x34>
 122:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x06); //shift cursor right
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 12a:	08 95       	ret

0000012c <lcd_print>:
}
void lcd_print(char *str)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
	
	unsigned int i=0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i]!='\0')
 13a:	03 c0       	rjmp	.+6      	; 0x142 <lcd_print+0x16>
	{
		lcdData(str[i++]);
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdData>
}
void lcd_print(char *str)
{
	
	unsigned int i=0;
	while(str[i]!='\0')
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <lcd_print+0x10>
	{
		lcdData(str[i++]);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <button_init>:
void button_init() {
	KEY_DDRB &= 0xF0; // Set pins 0-3 of Port B as input
 158:	87 b3       	in	r24, 0x17	; 23
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	87 bb       	out	0x17, r24	; 23
	KEY_PRTB |= 0x0F; // Enable pull-up resistors for pins 0-3
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	8f 60       	ori	r24, 0x0F	; 15
 162:	88 bb       	out	0x18, r24	; 24
 164:	08 95       	ret

00000166 <keyboard_init>:
}
void keyboard_init()
{
	DDRD = 0xFF;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	81 bb       	out	0x11, r24	; 17
	KEY_DDR = 0xF0;
 16a:	90 ef       	ldi	r25, 0xF0	; 240
 16c:	9a bb       	out	0x1a, r25	; 26
	KEY_PRT = 0xFF;
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	08 95       	ret

00000172 <button_check>:
}

int button_check() {
	int button_state = 0;
	if (!(KEY_PINB & (1 << PINB0))) {
 172:	b0 9b       	sbis	0x16, 0	; 22
 174:	09 c0       	rjmp	.+18     	; 0x188 <button_check+0x16>
		button_state = 1;
		} else if (!(KEY_PINB & (1 << PINB1))) {
 176:	b1 9b       	sbis	0x16, 1	; 22
 178:	0a c0       	rjmp	.+20     	; 0x18e <button_check+0x1c>
		button_state = 2;
		} else if (!(KEY_PINB & (1 << PINB2))) {
 17a:	b2 9b       	sbis	0x16, 2	; 22
 17c:	0b c0       	rjmp	.+22     	; 0x194 <button_check+0x22>
		button_state = 3;
		} else if (!(KEY_PINB & (1 << PINB3))) {
 17e:	b3 9b       	sbis	0x16, 3	; 22
 180:	0c c0       	rjmp	.+24     	; 0x19a <button_check+0x28>
	KEY_DDR = 0xF0;
	KEY_PRT = 0xFF;
}

int button_check() {
	int button_state = 0;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret
	if (!(KEY_PINB & (1 << PINB0))) {
		button_state = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
		} else if (!(KEY_PINB & (1 << PINB1))) {
		button_state = 2;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret
		} else if (!(KEY_PINB & (1 << PINB2))) {
		button_state = 3;
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret
		} else if (!(KEY_PINB & (1 << PINB3))) {
		button_state = 4;
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return button_state;
}
 19e:	08 95       	ret

000001a0 <keyfind>:
	
	while(1)
	{
		while(1)
		{
			keyboard_init();
 1a0:	0e 94 b3 00 	call	0x166	; 0x166 <keyboard_init>
			KEY_PRT = 0xEF; //ground row 0
 1a4:	8f ee       	ldi	r24, 0xEF	; 239
 1a6:	8b bb       	out	0x1b, r24	; 27
			colloc = (KEY_PIN & 0x0F); //read the columns
 1a8:	89 b3       	in	r24, 0x19	; 25
 1aa:	8f 70       	andi	r24, 0x0F	; 15
			if(colloc != 0x0F) //column detected
 1ac:	8f 30       	cpi	r24, 0x0F	; 15
 1ae:	a1 f4       	brne	.+40     	; 0x1d8 <keyfind+0x38>
				rowloc = 0;
				break;
			}
			
			
			KEY_PRT = 0xDF; //ground row 1
 1b0:	8f ed       	ldi	r24, 0xDF	; 223
 1b2:	8b bb       	out	0x1b, r24	; 27
			colloc = (KEY_PIN & 0x0F); //read the columns
 1b4:	89 b3       	in	r24, 0x19	; 25
 1b6:	8f 70       	andi	r24, 0x0F	; 15
			if(colloc != 0x0F) //column detected
 1b8:	8f 30       	cpi	r24, 0x0F	; 15
 1ba:	81 f4       	brne	.+32     	; 0x1dc <keyfind+0x3c>
				rowloc = 1;
				break;
			}
			
			
			KEY_PRT = 0xBF; //ground row 2
 1bc:	8f eb       	ldi	r24, 0xBF	; 191
 1be:	8b bb       	out	0x1b, r24	; 27
			colloc = (KEY_PIN & 0x0F); //read the columns
 1c0:	89 b3       	in	r24, 0x19	; 25
 1c2:	8f 70       	andi	r24, 0x0F	; 15
			if(colloc != 0x0F)
 1c4:	8f 30       	cpi	r24, 0x0F	; 15
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <keyfind+0x40>
				rowloc = 2;
				break;
			}
			
			
			KEY_PRT = 0x7F; //ground row 3
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	8b bb       	out	0x1b, r24	; 27
			colloc = (KEY_PIN & 0x0F);
 1cc:	89 b3       	in	r24, 0x19	; 25
 1ce:	8f 70       	andi	r24, 0x0F	; 15
			if(colloc != 0x0F) //column detected
 1d0:	8f 30       	cpi	r24, 0x0F	; 15
 1d2:	31 f3       	breq	.-52     	; 0x1a0 <keyfind>
			{
				rowloc = 3;
 1d4:	e3 e0       	ldi	r30, 0x03	; 3
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <keyfind+0x42>
			keyboard_init();
			KEY_PRT = 0xEF; //ground row 0
			colloc = (KEY_PIN & 0x0F); //read the columns
			if(colloc != 0x0F) //column detected
			{
				rowloc = 0;
 1d8:	e0 e0       	ldi	r30, 0x00	; 0
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <keyfind+0x42>
			
			KEY_PRT = 0xDF; //ground row 1
			colloc = (KEY_PIN & 0x0F); //read the columns
			if(colloc != 0x0F) //column detected
			{
				rowloc = 1;
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <keyfind+0x42>
			
			KEY_PRT = 0xBF; //ground row 2
			colloc = (KEY_PIN & 0x0F); //read the columns
			if(colloc != 0x0F)
			{
				rowloc = 2;
 1e0:	e2 e0       	ldi	r30, 0x02	; 2
			{
				rowloc = 3;
				break;
			}
		}
		if(colloc == 0x0E)
 1e2:	8e 30       	cpi	r24, 0x0E	; 14
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <keyfind+0x58>
		{
			return(keypad[rowloc][0]);
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	e0 5a       	subi	r30, 0xA0	; 160
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 81       	ld	r24, Z
 1f6:	08 95       	ret
		}
		else if(colloc == 0x0D)
 1f8:	8d 30       	cpi	r24, 0x0D	; 13
 1fa:	49 f4       	brne	.+18     	; 0x20e <keyfind+0x6e>
		{
			return (keypad[rowloc][1]);
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e0 5a       	subi	r30, 0xA0	; 160
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	81 81       	ldd	r24, Z+1	; 0x01
 20c:	08 95       	ret
		}
		else if(colloc == 0x0B)
 20e:	8b 30       	cpi	r24, 0x0B	; 11
 210:	49 f4       	brne	.+18     	; 0x224 <keyfind+0x84>
		{
			return (keypad[rowloc][2]);
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	08 95       	ret
		}
		else
		{
			return (keypad[rowloc][3]);
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e0 5a       	subi	r30, 0xA0	; 160
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	83 81       	ldd	r24, Z+3	; 0x03
		}
	}
}
 234:	08 95       	ret

00000236 <accept_votes>:
int c1,c2,c3,c4;
void accept_votes()
{
	lcd_print("Ready");
 236:	80 e7       	ldi	r24, 0x70	; 112
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
	unsigned char ch=keyfind();
 23e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <keyfind>
	if(ch=='1')
 242:	81 33       	cpi	r24, 0x31	; 49
 244:	c9 f4       	brne	.+50     	; 0x278 <accept_votes+0x42>
	{
		++c1;
 246:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <c1>
 24a:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <c1+0x1>
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	30 93 fd 00 	sts	0x00FD, r19	; 0x8000fd <c1+0x1>
 256:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <c1>
		lcdData(ch);
 25a:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	89 e6       	ldi	r24, 0x69	; 105
 262:	98 e1       	ldi	r25, 0x18	; 24
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <accept_votes+0x2e>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <accept_votes+0x38>
 26e:	00 00       	nop
		_delay_ms(1000);
		lcdCommand(0x01);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
		return;
 276:	08 95       	ret
	}
	else if(ch=='2')
 278:	82 33       	cpi	r24, 0x32	; 50
 27a:	c9 f4       	brne	.+50     	; 0x2ae <accept_votes+0x78>
	{
		++c2;
 27c:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <c2>
 280:	30 91 fb 00 	lds	r19, 0x00FB	; 0x8000fb <c2+0x1>
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	30 93 fb 00 	sts	0x00FB, r19	; 0x8000fb <c2+0x1>
 28c:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <c2>
		lcdData(ch);
 290:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdData>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	89 e6       	ldi	r24, 0x69	; 105
 298:	98 e1       	ldi	r25, 0x18	; 24
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <accept_votes+0x64>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <accept_votes+0x6e>
 2a4:	00 00       	nop
		_delay_ms(1000);
		lcdCommand(0x01);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
		return;
 2ac:	08 95       	ret
	}
	else if(ch=='3')
 2ae:	83 33       	cpi	r24, 0x33	; 51
 2b0:	c9 f4       	brne	.+50     	; 0x2e4 <accept_votes+0xae>
	{
		++c3;
 2b2:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <c3>
 2b6:	30 91 ff 00 	lds	r19, 0x00FF	; 0x8000ff <c3+0x1>
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	30 93 ff 00 	sts	0x00FF, r19	; 0x8000ff <c3+0x1>
 2c2:	20 93 fe 00 	sts	0x00FE, r18	; 0x8000fe <c3>
		lcdData(ch);
 2c6:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdData>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	89 e6       	ldi	r24, 0x69	; 105
 2ce:	98 e1       	ldi	r25, 0x18	; 24
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <accept_votes+0x9a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <accept_votes+0xa4>
 2da:	00 00       	nop
		_delay_ms(1000);
		lcdCommand(0x01);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
		return;
 2e2:	08 95       	ret
	}
	else
	{
		++c4;
 2e4:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <__data_end>
 2e8:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <__data_end+0x1>
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	30 93 f9 00 	sts	0x00F9, r19	; 0x8000f9 <__data_end+0x1>
 2f4:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__data_end>
		lcdData(ch);
 2f8:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdData>
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	89 e6       	ldi	r24, 0x69	; 105
 300:	98 e1       	ldi	r25, 0x18	; 24
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <accept_votes+0xcc>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <accept_votes+0xd6>
 30c:	00 00       	nop
		_delay_ms(1000);
		lcdCommand(0x01);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 314:	08 95       	ret

00000316 <main>:
	}
	
}

int main(void)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	64 97       	sbiw	r28, 0x14	; 20
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
	c1=0;c2=0;c3=0,c4=0;
 32a:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <c1+0x1>
 32e:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <c1>
 332:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <c2+0x1>
 336:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <c2>
 33a:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <c3+0x1>
 33e:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <c3>
 342:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__data_end+0x1>
 346:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__data_end>
	button_init();
 34a:	0e 94 ac 00 	call	0x158	; 0x158 <button_init>
	lcd_init();
 34e:	0e 94 77 00 	call	0xee	; 0xee <lcd_init>
	lcd_print("HI");
 352:	86 e7       	ldi	r24, 0x76	; 118
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	89 e6       	ldi	r24, 0x69	; 105
 35e:	98 e1       	ldi	r25, 0x18	; 24
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <main+0x4a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x54>
 36a:	00 00       	nop
	_delay_ms(1000);
	lcdCommand(0X80);
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
	
	
	int button_num = 0;
	while (1)
	{
		button_num = button_check();
 372:	0e 94 b9 00 	call	0x172	; 0x172 <button_check>
			itoa(button_num, button_num_str, 10);
			lcd_print(button_num_str);
			_delay_ms(500);
		}
		*/
		if(button_num==1)
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	91 05       	cpc	r25, r1
 37a:	19 f4       	brne	.+6      	; 0x382 <main+0x6c>
		{
			accept_votes();
 37c:	0e 94 1b 01 	call	0x236	; 0x236 <accept_votes>
 380:	f8 cf       	rjmp	.-16     	; 0x372 <main+0x5c>
			
		}
		else if(button_num==2)
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	91 05       	cpc	r25, r1
 386:	09 f0       	breq	.+2      	; 0x38a <main+0x74>
 388:	5b c0       	rjmp	.+182    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <c1>
 396:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <c1+0x1>
 39a:	0e 94 9a 02 	call	0x534	; 0x534 <__itoa_ncheck>
		{
			char str[20];
			itoa(c1,str,10);
			lcd_print("Candidate 1: ");
 39e:	89 e7       	ldi	r24, 0x79	; 121
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
			lcd_print(str);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	89 e6       	ldi	r24, 0x69	; 105
 3b2:	98 e1       	ldi	r25, 0x18	; 24
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x9e>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0xa8>
 3be:	00 00       	nop
			_delay_ms(1000);
			lcdCommand(0x01);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 3c6:	4a e0       	ldi	r20, 0x0A	; 10
 3c8:	be 01       	movw	r22, r28
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <c2>
 3d2:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <c2+0x1>
 3d6:	0e 94 9a 02 	call	0x534	; 0x534 <__itoa_ncheck>
			itoa(c2,str,10);
			lcd_print(" Candidate 2: ");
 3da:	87 e8       	ldi	r24, 0x87	; 135
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
			lcd_print(str);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	89 e6       	ldi	r24, 0x69	; 105
 3ee:	98 e1       	ldi	r25, 0x18	; 24
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	80 40       	sbci	r24, 0x00	; 0
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0xda>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0xe4>
 3fa:	00 00       	nop
			_delay_ms(1000);
			lcdCommand(0x01);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 402:	4a e0       	ldi	r20, 0x0A	; 10
 404:	be 01       	movw	r22, r28
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <c3>
 40e:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <c3+0x1>
 412:	0e 94 9a 02 	call	0x534	; 0x534 <__itoa_ncheck>
			itoa(c3,str,10);
			lcd_print(" Candidate 3: ");
 416:	86 e9       	ldi	r24, 0x96	; 150
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
			lcd_print(str);
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	89 e6       	ldi	r24, 0x69	; 105
 42a:	98 e1       	ldi	r25, 0x18	; 24
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
			_delay_ms(1000);
			lcdCommand(0x01);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 43e:	99 cf       	rjmp	.-206    	; 0x372 <main+0x5c>
		}
		else if(button_num==3)
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	91 05       	cpc	r25, r1
 444:	09 f0       	breq	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	56 c0       	rjmp	.+172    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
		{
			int total=c1+c2+c3;
 448:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <c1>
 44c:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <c1+0x1>
 450:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <c2>
 454:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <c2+0x1>
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <c3>
 460:	30 91 ff 00 	lds	r19, 0x00FF	; 0x8000ff <c3+0x1>
 464:	4a e0       	ldi	r20, 0x0A	; 10
 466:	be 01       	movw	r22, r28
 468:	6f 5f       	subi	r22, 0xFF	; 255
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	0e 94 9a 02 	call	0x534	; 0x534 <__itoa_ncheck>
			char str[20];
			itoa(total,str,10);
			lcd_print("Total ");
 474:	85 ea       	ldi	r24, 0xA5	; 165
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
			lcd_print(str);
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	89 e6       	ldi	r24, 0x69	; 105
 488:	98 e1       	ldi	r25, 0x18	; 24
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
			_delay_ms(1000);
			lcdCommand(0x01);
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
			lcd_print(str);
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
			
			if(c1>c2 && c1>c3)
 4a4:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <c1>
 4a8:	30 91 fd 00 	lds	r19, 0x00FD	; 0x8000fd <c1+0x1>
 4ac:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <c2>
 4b0:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <c2+0x1>
 4b4:	82 17       	cp	r24, r18
 4b6:	93 07       	cpc	r25, r19
 4b8:	64 f4       	brge	.+24     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ba:	40 91 fe 00 	lds	r20, 0x00FE	; 0x8000fe <c3>
 4be:	50 91 ff 00 	lds	r21, 0x00FF	; 0x8000ff <c3+0x1>
 4c2:	42 17       	cp	r20, r18
 4c4:	53 07       	cpc	r21, r19
 4c6:	2c f4       	brge	.+10     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			{
				lcd_print("WINNER : Candidate 1!!");
 4c8:	8c ea       	ldi	r24, 0xAC	; 172
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 4d0:	50 cf       	rjmp	.-352    	; 0x372 <main+0x5c>
			}
			else if(c2>c3)
 4d2:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <c3>
 4d6:	30 91 ff 00 	lds	r19, 0x00FF	; 0x8000ff <c3+0x1>
 4da:	28 17       	cp	r18, r24
 4dc:	39 07       	cpc	r19, r25
 4de:	2c f4       	brge	.+10     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			{
				lcd_print("WINNER : Candidate 2!!");
 4e0:	83 ec       	ldi	r24, 0xC3	; 195
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 4e8:	44 cf       	rjmp	.-376    	; 0x372 <main+0x5c>
			}
			else
			{
				lcd_print("WINNER : Candidate 3!!");
 4ea:	8a ed       	ldi	r24, 0xDA	; 218
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 4f2:	3f cf       	rjmp	.-386    	; 0x372 <main+0x5c>
			}
		}
		else if(button_num==4)
 4f4:	04 97       	sbiw	r24, 0x04	; 4
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f8:	3c cf       	rjmp	.-392    	; 0x372 <main+0x5c>
		{
			lcd_print("Clear");
 4fa:	81 ef       	ldi	r24, 0xF1	; 241
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_print>
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	89 e6       	ldi	r24, 0x69	; 105
 506:	98 e1       	ldi	r25, 0x18	; 24
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 512:	00 00       	nop
			_delay_ms(1000);
			c1=0;
 514:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <c1+0x1>
 518:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <c1>
			c2=0;
 51c:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <c2+0x1>
 520:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <c2>
			c3=0;
 524:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <c3+0x1>
 528:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <c3>
			lcdCommand(0x01);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 49 00 	call	0x92	; 0x92 <lcdCommand>
 532:	1f cf       	rjmp	.-450    	; 0x372 <main+0x5c>

00000534 <__itoa_ncheck>:
 534:	bb 27       	eor	r27, r27
 536:	4a 30       	cpi	r20, 0x0A	; 10
 538:	31 f4       	brne	.+12     	; 0x546 <__itoa_ncheck+0x12>
 53a:	99 23       	and	r25, r25
 53c:	22 f4       	brpl	.+8      	; 0x546 <__itoa_ncheck+0x12>
 53e:	bd e2       	ldi	r27, 0x2D	; 45
 540:	90 95       	com	r25
 542:	81 95       	neg	r24
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__utoa_common>

0000054a <__utoa_ncheck>:
 54a:	bb 27       	eor	r27, r27

0000054c <__utoa_common>:
 54c:	fb 01       	movw	r30, r22
 54e:	55 27       	eor	r21, r21
 550:	aa 27       	eor	r26, r26
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	aa 1f       	adc	r26, r26
 558:	a4 17       	cp	r26, r20
 55a:	10 f0       	brcs	.+4      	; 0x560 <__utoa_common+0x14>
 55c:	a4 1b       	sub	r26, r20
 55e:	83 95       	inc	r24
 560:	50 51       	subi	r21, 0x10	; 16
 562:	b9 f7       	brne	.-18     	; 0x552 <__utoa_common+0x6>
 564:	a0 5d       	subi	r26, 0xD0	; 208
 566:	aa 33       	cpi	r26, 0x3A	; 58
 568:	08 f0       	brcs	.+2      	; 0x56c <__utoa_common+0x20>
 56a:	a9 5d       	subi	r26, 0xD9	; 217
 56c:	a1 93       	st	Z+, r26
 56e:	00 97       	sbiw	r24, 0x00	; 0
 570:	79 f7       	brne	.-34     	; 0x550 <__utoa_common+0x4>
 572:	b1 11       	cpse	r27, r1
 574:	b1 93       	st	Z+, r27
 576:	11 92       	st	Z+, r1
 578:	cb 01       	movw	r24, r22
 57a:	0c 94 bf 02 	jmp	0x57e	; 0x57e <strrev>

0000057e <strrev>:
 57e:	dc 01       	movw	r26, r24
 580:	fc 01       	movw	r30, r24
 582:	67 2f       	mov	r22, r23
 584:	71 91       	ld	r23, Z+
 586:	77 23       	and	r23, r23
 588:	e1 f7       	brne	.-8      	; 0x582 <strrev+0x4>
 58a:	32 97       	sbiw	r30, 0x02	; 2
 58c:	04 c0       	rjmp	.+8      	; 0x596 <strrev+0x18>
 58e:	7c 91       	ld	r23, X
 590:	6d 93       	st	X+, r22
 592:	70 83       	st	Z, r23
 594:	62 91       	ld	r22, -Z
 596:	ae 17       	cp	r26, r30
 598:	bf 07       	cpc	r27, r31
 59a:	c8 f3       	brcs	.-14     	; 0x58e <strrev+0x10>
 59c:	08 95       	ret

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
